Thread class constructor.

new Thread();
new Thread(Runnable r);
new Thread(String threadName);
new Thread(Runnable r,String threadName);
new Thread(ThreadGroup g,String threadName);
new Thread(ThreadGroup g,Runnable r);
new Thread(ThreadGroup g,Runnable r,String threadName);
new Thread(ThreadGroup g,Runnable r,String threadName,long stacksize);

--------------------------------------------------------------------------------

Hybrid way of defining Thread.

class MyThread extends Thread{
      public void run(){
        // Job of Thread

          sop("Child Thread")

      }
}


class ThreadDemo{

    //Main thread create and start child thread.
    psvm(){
      MyThread t = new MyThread();//creating thread instance
      MyThread t2 = new MyThread(t);//creating thread instance with t1 thread
      t2.start(); //starting thread
      sop("Main Thread")

    }
}

Output:

Child Thread  Mainthread
Main Thread   ChildThread

--------------------------------------------------------------------------------
Getting and Setting Name of the Thread

Every thread in java has some name. It may be default name generated by JVM or
customised name provided by programmer.

We can get and set name of name of your thread by using following two method of
thread class.

public final String getName();
public final void setName(String name);

---------------------------------------
class MyThread extends Thread{

}

class ThreadDemo{
    psvm(){
      sop(Thread.currentThread().getName());
    }
}

Output:
main
----------------------------------------

class MyThread extends Thread{

}

class ThreadDemo{
    psvm(){
      sop(Thread.currentThread().getName());
      MyThread t = new MyThread();//creating thread instance
      sop(t.getName())
      Thread.currentThread().setName("Rishabh Saxena")
      sop(Thread.currentThread().getName());
      sop(10/0)
    }
}

Output:
Arthematic Exception in thread "Rishabh Saxena"

--------------------------------------------------------------------------------
Thread.currentThread()

We can get current executing Thread Object by using Thread.currentThread();


---------------------------------------------
class MyThread extends Thread{
      public void run(){
          sopln("Executed by"+ Thread.currentThread().getName())
      }
}


class ThreadDemo{

    //Main thread create and start child thread.
    psvm(){
      MyThread t = new MyThread();//creating thread instance
      t2.start(); //starting thread
      sopln("Executed by"+ Thread.currentThread().getName())
    }
}

Output:
----
Executed by Thread 0
Executed by main
---
Executed by main
Executed by Thread 0



--------------------------------------------------------------------------------
