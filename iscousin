public boolean isCousins(TreeNode root, int x, int y) {
        int levelNode1 = findLevel(root, x, 0);
        int levelNode2 = findLevel(root, y, 0);
         
        if(levelNode1 == -1 || levelNode2 == -1){
            return false;
        }
         
        if(levelNode1 != levelNode2){
            return false;
        }
         
        return isCousin(root, x, y);
    }
 
    private  boolean isCousin(Node startNode, int node1Data, int node2Data){
        if(startNode==null){
            return false;
        }
         
        if(startNode.getLeft()!=null && startNode.getRight()!=null){
            if( (startNode.getLeft().getData() == node1Data && startNode.getRight().getData() == node2Data) ||(startNode.getLeft().getData() == node2Data && startNode.getRight().getData() == node1Data) ){
                return false; //if both node have same parent then they are sibling and not cousin
            }
        }
         
        boolean left = isCousin(startNode.getLeft(), node1Data, node2Data);
        if(!left){
            return false;
        }
        boolean right = isCousin(startNode.getRight(), node1Data, node2Data);
        if(!right){
            return false;
        }
         
        return true;
    }
 
    private int findLevel(Node startNode, int nodeData, int level){
        if(startNode==null){
            return 0;
        }
         
        if(startNode.getData() == nodeData){
            return level;
        }
         
        int left = findLevel(startNode.getLeft(), nodeData, level+1);
        if(left != 0) return left;
         
        int right = findLevel(startNode.getRight(), nodeData, level+1);
        if(right != 0) return right;
         
        return 0;
    }
